apiVersion: v1
data:
  fluent-bit.conf: W1NFUlZJQ0VdCiAgICBEYWVtb24gICAgICAgICAgb2ZmCiAgICBMb2dfTGV2ZWwgICAgICAgd2FybgpbSU5QVVRdCiAgICBOYW1lIHRhaWwKICAgIFBhdGggL2hvbWUvcG9zdGdyZXMvcGdkYXRhL3Bncm9vdC9wZ19sb2cvKi5jc3YKICAgICNEQiAvaG9tZS9wb3N0Z3Jlcy9wZ2RhdGEvcGdyb290L3BnX2xvZy9wb3N0Z3Jlc3FsLmNzdi5wb3MKICAgIFRhZyAgcHNxbGNzdgpbSU5QVVRdCiAgICBOYW1lIHRhaWwKICAgIFBhdGggL2hvbWUvcG9zdGdyZXMvcGdkYXRhL3Bncm9vdC9wZ19sb2cvKi5sb2cKICAgICNEQiAvaG9tZS9wb3N0Z3Jlcy9wZ2RhdGEvcGdyb290L3BnX2xvZy9wb3N0Z3Jlc3FsLmxvZy5wb3MKICAgIFRhZyAgcHNxbGxvZwpbT1VUUFVUXQogICAgTmFtZSAgc3Rkb3V0CiAgICBNYXRjaCAqKgo=
  postgres-exporter-container-port: "9187"
  postgres-exporter-image: prometheuscommunity/postgres-exporter:v0.9.0
  postgres-exporter-limits-cpu: 500m
  postgres-exporter-limits-memory: 256M
  postgres-exporter-requests-cpu: 100m
  postgres-exporter-requests-memory: 200M
  postgres-exporter-service-port: "9187"
  postgres-fluentbit-image: fluent/fluent-bit:1.7.2
  postgres-fluentbit-limits-cpu: 500m
  postgres-fluentbit-limits-memory: 256M
  postgres-fluentbit-requests-cpu: 100m
  postgres-fluentbit-requests-memory: 200M
  queries.yaml: 
kind: ConfigMap
metadata:
  name: postgreslet-postgres-sidecars
  namespace: postgreslet-system
